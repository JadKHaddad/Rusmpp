use super::TLVValue;
use rusmpp_io::io::length::IoLength;

impl IoLength for TLVValue {
    fn length(&self) -> usize {
        match self {
            TLVValue::AdditionalStatusInfoText(v) => v.length(),
            TLVValue::AlertOnMessageDelivery(v) => v.length(),
            TLVValue::BillingIdentification(v) => v.length(),
            TLVValue::BroadcastAreaIdentifier(v) => v.length(),
            TLVValue::BroadcastAreaSuccess(v) => v.length(),
            TLVValue::BroadcastContentTypeInfo(v) => v.length(),
            TLVValue::BroadcastChannelIndicator(v) => v.length(),
            TLVValue::BroadcastContentType(v) => v.length(),
            TLVValue::BroadcastEndTime(v) => v.length(),
            TLVValue::BroadcastErrorStatus(v) => v.length(),
            TLVValue::BroadcastFrequencyInterval(v) => v.length(),
            TLVValue::BroadcastMessageClass(v) => v.length(),
            TLVValue::BroadcastRepNum(v) => v.length(),
            TLVValue::BroadcastServiceGroup(v) => v.length(),
            TLVValue::CallbackNum(v) => v.length(),
            TLVValue::CallbackNumAtag(v) => v.length(),
            TLVValue::CallbackNumPresInd(v) => v.length(),
            TLVValue::CongestionState(v) => v.length(),
            TLVValue::DeliveryFailureReason(v) => v.length(),
            TLVValue::DestAddrNpCountry(v) => v.length(),
            TLVValue::DestAddrNpInformation(v) => v.length(),
            TLVValue::DestAddrNpResolution(v) => v.length(),
            TLVValue::DestAddrSubunit(v) => v.length(),
            TLVValue::DestBearerType(v) => v.length(),
            TLVValue::DestNetworkId(v) => v.length(),
            TLVValue::DestNetworkType(v) => v.length(),
            TLVValue::DestNodeId(v) => v.length(),
            TLVValue::DestSubaddress(v) => v.length(),
            TLVValue::DestTelematicsId(v) => v.length(),
            TLVValue::DestPort(v) => v.length(),
            TLVValue::DisplayTime(v) => v.length(),
            TLVValue::DpfResult(v) => v.length(),
            TLVValue::ItsReplyType(v) => v.length(),
            TLVValue::ItsSessionInfo(v) => v.length(),
            TLVValue::LanguageIndicator(v) => v.length(),
            TLVValue::MessagePayload(v) => v.length(),
            TLVValue::MessageState(v) => v.length(),
            TLVValue::MoreMessagesToSend(v) => v.length(),
            TLVValue::MsAvailabilityStatus(v) => v.length(),
            TLVValue::MsMsgWaitFacilities(v) => v.length(),
            TLVValue::MsValidity(v) => v.length(),
            TLVValue::NetworkErrorCode(v) => v.length(),
            TLVValue::NumberOfMessages(v) => v.length(),
            TLVValue::PayloadType(v) => v.length(),
            TLVValue::PrivacyIndicator(v) => v.length(),
            TLVValue::QosTimeToLive(v) => v.length(),
            TLVValue::ReceiptedMessageId(v) => v.length(),
            TLVValue::SarMsgRefNum(v) => v.length(),
            TLVValue::SarSegmentSeqnum(v) => v.length(),
            TLVValue::SarTotalSegments(v) => v.length(),
            TLVValue::ScInterfaceVersion(v) => v.length(),
            TLVValue::SetDpf(v) => v.length(),
            TLVValue::SmsSignal(v) => v.length(),
            TLVValue::SourceAddrSubunit(v) => v.length(),
            TLVValue::SourceBearerType(v) => v.length(),
            TLVValue::SourceNetworkId(v) => v.length(),
            TLVValue::SourceNetworkType(v) => v.length(),
            TLVValue::SourceNodeId(v) => v.length(),
            TLVValue::SourcePort(v) => v.length(),
            TLVValue::SourceSubaddress(v) => v.length(),
            TLVValue::SourceTelematicsId(v) => v.length(),
            TLVValue::UserMessageReference(v) => v.length(),
            TLVValue::UserResponseCode(v) => v.length(),
            TLVValue::UssdServiceOp(v) => v.length(),
            TLVValue::Other { value, .. } => value.length(),
        }
    }
}
