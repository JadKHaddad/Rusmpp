[package]
name = "rusmpp"
version = "0.2.3"
edition = "2024"
rust-version = "1.85.0"
description = "A Rust SMPP library."
authors = ["Jad K. Haddad <jadkhaddad@gmail.com>"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/JadKHaddad/Rusmpp"
readme = "../Readme.md"
keywords = ["smpp", "smsc", "messaging", "networking", "protocol"]

[dev-dependencies]
tracing = { version = "0.1.40" }
tokio = { version = "1.47.1", features = ["full"] }
tokio-util = { version = "0.7.16", default-features = false, features = [
    "codec",
] }
tracing-subscriber = { version = "0.3.18", features = ["env-filter"] }
futures = "0.3.31"

[dependencies]
rusmpp-core = { path = "../rusmpp-core", version = "0.1.2", default-features = false, features = [
    "alloc",
    "tokio-codec",
] }

[features]
default = ["tokio-codec"]
# Implements tokio's util codec Encoder/Decoder traits.
tokio-codec = ["rusmpp-core/tokio-codec"]
# Enables verbose DecodeError with DecodeErrorSource.
verbose = ["rusmpp-core/verbose"]
# Derives serde Serialize for all SMPP types.
serde = ["rusmpp-core/serde"]
# Derives serde Deserialize for all SMPP types. This will allow to create unchecked SMPP values from arbitrary serialized data, which may not be valid SMPP values.
serde-deserialize-unchecked = ["rusmpp-core/serde-deserialize-unchecked"]
# Prints byte slices like: [0x00, 0x00, 0x00, 0x6F] instead of [00, 00, 00, 6F].
pretty-hex-fmt = ["rusmpp-core/pretty-hex-fmt"]
# Prints byte slices as characters.
char-fmt = ["rusmpp-core/char-fmt"]
# Enables logging via the `tracing` crate.
tracing = ["rusmpp-core/tracing"]

[[example]]
name = "client_server"
path = "examples/client_server.rs"
required-features = ["tokio-codec", "tracing"]

[[example]]
name = "simple"
path = "examples/simple.rs"
required-features = ["tokio-codec"]

[[example]]
name = "submit_sm"
path = "examples/submit_sm.rs"
required-features = ["tokio-codec", "tracing"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
